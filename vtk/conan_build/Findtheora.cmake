########## MACROS ###########################################################################
#############################################################################################

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                string(REGEX REPLACE "[^A-Za-z0-9.+_-]" "_" _LIBRARY_NAME ${_LIBRARY_NAME})
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


########### FOUND PACKAGE ###################################################################
#############################################################################################

include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated Findtheora.cmake")
set(theora_FOUND 1)
set(theora_VERSION "1.1.1")

find_package_handle_standard_args(theora REQUIRED_VARS
                                  theora_VERSION VERSION_VAR theora_VERSION)
mark_as_advanced(theora_FOUND theora_VERSION)

set(theora_COMPONENTS theora::theoraenc theora::theoradec theora::_theora)

if(theora_FIND_COMPONENTS)
    foreach(_FIND_COMPONENT ${theora_FIND_COMPONENTS})
        list(FIND theora_COMPONENTS "theora::${_FIND_COMPONENT}" _index)
        if(${_index} EQUAL -1)
            conan_message(FATAL_ERROR "Conan: Component '${_FIND_COMPONENT}' NOT found in package 'theora'")
        else()
            conan_message(STATUS "Conan: Component '${_FIND_COMPONENT}' found in package 'theora'")
        endif()
    endforeach()
endif()

########### VARIABLES #######################################################################
#############################################################################################


set(theora_INCLUDE_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_INCLUDE_DIR "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_INCLUDES "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_RES_DIRS )
set(theora_DEFINITIONS )
set(theora_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(theora_COMPILE_DEFINITIONS )
set(theora_COMPILE_OPTIONS_LIST "" "")
set(theora_COMPILE_OPTIONS_C "")
set(theora_COMPILE_OPTIONS_CXX "")
set(theora_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(theora_LIBRARIES "") # Will be filled later
set(theora_LIBS "") # Same as theora_LIBRARIES
set(theora_SYSTEM_LIBS )
set(theora_FRAMEWORK_DIRS )
set(theora_FRAMEWORKS )
set(theora_FRAMEWORKS_FOUND "") # Will be filled later
set(theora_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(theora_FRAMEWORKS_FOUND "${theora_FRAMEWORKS}" "${theora_FRAMEWORK_DIRS}")

mark_as_advanced(theora_INCLUDE_DIRS
                 theora_INCLUDE_DIR
                 theora_INCLUDES
                 theora_DEFINITIONS
                 theora_LINKER_FLAGS_LIST
                 theora_COMPILE_DEFINITIONS
                 theora_COMPILE_OPTIONS_LIST
                 theora_LIBRARIES
                 theora_LIBS
                 theora_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to theora_LIBS and theora_LIBRARY_LIST
set(theora_LIBRARY_LIST libtheora)
set(theora_LIB_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_theora_DEPENDENCIES "${theora_FRAMEWORKS_FOUND} ${theora_SYSTEM_LIBS} Ogg::Ogg")

conan_package_library_targets("${theora_LIBRARY_LIST}"  # libraries
                              "${theora_LIB_DIRS}"      # package_libdir
                              "${_theora_DEPENDENCIES}"  # deps
                              theora_LIBRARIES            # out_libraries
                              theora_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "theora")                                      # package_name

set(theora_LIBS ${theora_LIBRARIES})

foreach(_FRAMEWORK ${theora_FRAMEWORKS_FOUND})
    list(APPEND theora_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND theora_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${theora_SYSTEM_LIBS})
    list(APPEND theora_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND theora_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(theora_LIBRARIES_TARGETS "${theora_LIBRARIES_TARGETS};Ogg::Ogg")
set(theora_LIBRARIES "${theora_LIBRARIES};Ogg::Ogg")

set(CMAKE_MODULE_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_PREFIX_PATH})


########### COMPONENT _theora VARIABLES #############################################

set(theora__theora_INCLUDE_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora__theora_INCLUDE_DIR "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora__theora_INCLUDES "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora__theora_LIB_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/lib")
set(theora__theora_RES_DIRS )
set(theora__theora_DEFINITIONS )
set(theora__theora_COMPILE_DEFINITIONS )
set(theora__theora_COMPILE_OPTIONS_C "")
set(theora__theora_COMPILE_OPTIONS_CXX "")
set(theora__theora_LIBS libtheora)
set(theora__theora_SYSTEM_LIBS )
set(theora__theora_FRAMEWORK_DIRS )
set(theora__theora_FRAMEWORKS )
set(theora__theora_BUILD_MODULES_PATHS )
set(theora__theora_DEPENDENCIES Ogg::Ogg)
set(theora__theora_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT theoradec VARIABLES #############################################

set(theora_theoradec_INCLUDE_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_theoradec_INCLUDE_DIR "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_theoradec_INCLUDES "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_theoradec_LIB_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/lib")
set(theora_theoradec_RES_DIRS )
set(theora_theoradec_DEFINITIONS )
set(theora_theoradec_COMPILE_DEFINITIONS )
set(theora_theoradec_COMPILE_OPTIONS_C "")
set(theora_theoradec_COMPILE_OPTIONS_CXX "")
set(theora_theoradec_LIBS )
set(theora_theoradec_SYSTEM_LIBS )
set(theora_theoradec_FRAMEWORK_DIRS )
set(theora_theoradec_FRAMEWORKS )
set(theora_theoradec_BUILD_MODULES_PATHS )
set(theora_theoradec_DEPENDENCIES Ogg::Ogg theora::_theora theora::_theora)
set(theora_theoradec_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT theoraenc VARIABLES #############################################

set(theora_theoraenc_INCLUDE_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_theoraenc_INCLUDE_DIR "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_theoraenc_INCLUDES "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/include")
set(theora_theoraenc_LIB_DIRS "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/lib")
set(theora_theoraenc_RES_DIRS )
set(theora_theoraenc_DEFINITIONS )
set(theora_theoraenc_COMPILE_DEFINITIONS )
set(theora_theoraenc_COMPILE_OPTIONS_C "")
set(theora_theoraenc_COMPILE_OPTIONS_CXX "")
set(theora_theoraenc_LIBS )
set(theora_theoraenc_SYSTEM_LIBS )
set(theora_theoraenc_FRAMEWORK_DIRS )
set(theora_theoraenc_FRAMEWORKS )
set(theora_theoraenc_BUILD_MODULES_PATHS )
set(theora_theoraenc_DEPENDENCIES theora::theoradec Ogg::Ogg)
set(theora_theoraenc_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)


########## FIND PACKAGE DEPENDENCY ##########################################################
#############################################################################################

include(CMakeFindDependencyMacro)

if(NOT Ogg_FOUND)
    find_dependency(Ogg REQUIRED)
else()
    conan_message(STATUS "Conan: Dependency Ogg already found")
endif()


########## FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #######################################
#############################################################################################

########## COMPONENT _theora FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(theora__theora_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(theora__theora_FRAMEWORKS_FOUND "${theora__theora_FRAMEWORKS}" "${theora__theora_FRAMEWORK_DIRS}")

set(theora__theora_LIB_TARGETS "")
set(theora__theora_NOT_USED "")
set(theora__theora_LIBS_FRAMEWORKS_DEPS ${theora__theora_FRAMEWORKS_FOUND} ${theora__theora_SYSTEM_LIBS} ${theora__theora_DEPENDENCIES})
conan_package_library_targets("${theora__theora_LIBS}"
                              "${theora__theora_LIB_DIRS}"
                              "${theora__theora_LIBS_FRAMEWORKS_DEPS}"
                              theora__theora_NOT_USED
                              theora__theora_LIB_TARGETS
                              ""
                              "theora__theora")

set(theora__theora_LINK_LIBS ${theora__theora_LIB_TARGETS} ${theora__theora_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_PREFIX_PATH})

########## COMPONENT theoradec FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(theora_theoradec_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(theora_theoradec_FRAMEWORKS_FOUND "${theora_theoradec_FRAMEWORKS}" "${theora_theoradec_FRAMEWORK_DIRS}")

set(theora_theoradec_LIB_TARGETS "")
set(theora_theoradec_NOT_USED "")
set(theora_theoradec_LIBS_FRAMEWORKS_DEPS ${theora_theoradec_FRAMEWORKS_FOUND} ${theora_theoradec_SYSTEM_LIBS} ${theora_theoradec_DEPENDENCIES})
conan_package_library_targets("${theora_theoradec_LIBS}"
                              "${theora_theoradec_LIB_DIRS}"
                              "${theora_theoradec_LIBS_FRAMEWORKS_DEPS}"
                              theora_theoradec_NOT_USED
                              theora_theoradec_LIB_TARGETS
                              ""
                              "theora_theoradec")

set(theora_theoradec_LINK_LIBS ${theora_theoradec_LIB_TARGETS} ${theora_theoradec_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_PREFIX_PATH})

########## COMPONENT theoraenc FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(theora_theoraenc_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(theora_theoraenc_FRAMEWORKS_FOUND "${theora_theoraenc_FRAMEWORKS}" "${theora_theoraenc_FRAMEWORK_DIRS}")

set(theora_theoraenc_LIB_TARGETS "")
set(theora_theoraenc_NOT_USED "")
set(theora_theoraenc_LIBS_FRAMEWORKS_DEPS ${theora_theoraenc_FRAMEWORKS_FOUND} ${theora_theoraenc_SYSTEM_LIBS} ${theora_theoraenc_DEPENDENCIES})
conan_package_library_targets("${theora_theoraenc_LIBS}"
                              "${theora_theoraenc_LIB_DIRS}"
                              "${theora_theoraenc_LIBS_FRAMEWORKS_DEPS}"
                              theora_theoraenc_NOT_USED
                              theora_theoraenc_LIB_TARGETS
                              ""
                              "theora_theoraenc")

set(theora_theoraenc_LINK_LIBS ${theora_theoraenc_LIB_TARGETS} ${theora_theoraenc_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "C:/Users/johannes/.conan/data/theora/1.1.1/_/_/package/8cc063c8c4a8eeb7fc4085018726e14c0565f995/" ${CMAKE_PREFIX_PATH})


########## TARGETS ##########################################################################
#############################################################################################

########## COMPONENT _theora TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET theora::_theora)
        add_library(theora::_theora INTERFACE IMPORTED)
        set_target_properties(theora::_theora PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${theora__theora_INCLUDE_DIRS}")
        set_target_properties(theora::_theora PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${theora__theora_LIB_DIRS}")
        set_target_properties(theora::_theora PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${theora__theora_LINK_LIBS};${theora__theora_LINKER_FLAGS_LIST}")
        set_target_properties(theora::_theora PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${theora__theora_COMPILE_DEFINITIONS}")
        set_target_properties(theora::_theora PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${theora__theora_COMPILE_OPTIONS_C};${theora__theora_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT theoradec TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET theora::theoradec)
        add_library(theora::theoradec INTERFACE IMPORTED)
        set_target_properties(theora::theoradec PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${theora_theoradec_INCLUDE_DIRS}")
        set_target_properties(theora::theoradec PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${theora_theoradec_LIB_DIRS}")
        set_target_properties(theora::theoradec PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${theora_theoradec_LINK_LIBS};${theora_theoradec_LINKER_FLAGS_LIST}")
        set_target_properties(theora::theoradec PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${theora_theoradec_COMPILE_DEFINITIONS}")
        set_target_properties(theora::theoradec PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${theora_theoradec_COMPILE_OPTIONS_C};${theora_theoradec_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT theoraenc TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET theora::theoraenc)
        add_library(theora::theoraenc INTERFACE IMPORTED)
        set_target_properties(theora::theoraenc PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${theora_theoraenc_INCLUDE_DIRS}")
        set_target_properties(theora::theoraenc PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${theora_theoraenc_LIB_DIRS}")
        set_target_properties(theora::theoraenc PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${theora_theoraenc_LINK_LIBS};${theora_theoraenc_LINKER_FLAGS_LIST}")
        set_target_properties(theora::theoraenc PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${theora_theoraenc_COMPILE_DEFINITIONS}")
        set_target_properties(theora::theoraenc PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${theora_theoraenc_COMPILE_OPTIONS_C};${theora_theoraenc_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## GLOBAL TARGET ####################################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    if(NOT TARGET theora::theora)
        add_library(theora::theora INTERFACE IMPORTED)
    endif()
    set_property(TARGET theora::theora APPEND PROPERTY
                 INTERFACE_LINK_LIBRARIES "${theora_COMPONENTS}")
endif()

########## BUILD MODULES ####################################################################
#############################################################################################
########## COMPONENT _theora BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${theora__theora_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT theoradec BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${theora_theoradec_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT theoraenc BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${theora_theoraenc_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
